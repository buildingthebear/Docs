{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Build the Bear - Resources and Documentation Here you'll find a collection of resources geared towards builders, traders, and hodlers. This documentation is designed to improve the overall quality of projects and participants in this space, we can do better. Info Let it be clear that none of these documents are an end-all be-all for any given project or process, but hopefully a reference for those that may need a little guidance For Builders Token Launch Guide : Every step of the process, you bring the details How to Deploy Smart Contracts : Just your need-to-know(s) How to Mint NFTs : Where to start for any level of understanding For Hodlers Token Analysis Guide : What to look for, and what NOT to look for Build the Bear Market GitHub","title":"Directory"},{"location":"#build-the-bear-resources-and-documentation","text":"Here you'll find a collection of resources geared towards builders, traders, and hodlers. This documentation is designed to improve the overall quality of projects and participants in this space, we can do better. Info Let it be clear that none of these documents are an end-all be-all for any given project or process, but hopefully a reference for those that may need a little guidance","title":"Build the Bear - Resources and Documentation"},{"location":"#for-builders","text":"Token Launch Guide : Every step of the process, you bring the details How to Deploy Smart Contracts : Just your need-to-know(s) How to Mint NFTs : Where to start for any level of understanding","title":"For Builders"},{"location":"#for-hodlers","text":"Token Analysis Guide : What to look for, and what NOT to look for Build the Bear Market GitHub","title":"For Hodlers"},{"location":"analysis/","text":"Token Analysis Guide Warning Document under construction and subject to change. Not to be considered a comprehensive guide. Depending on the project, your risk-tolerance, and goals... items listed may not be applicable. Further, this is not a guaranteed path to finding safe \"investments\", and this documentation should never be treated as law. Information below is outlined as a list of details an investor may want to consider before entering a liquidity pool. Check the contract There are many metrics you can measure on-chain, and many ways to obscure those metrics. It's important to understand what you're looking for, and to know how to verify what you're looking at. Use trusted analysis tools and telegram bots for high-level details on the current state of the token. Useful for liquidity metrics, Moonarch Token Sniffer SafeAnalyzerBot Check the explorer, has the contract been verified? \u2192 Read it. Are there any suspicious looking operations? Official solidity libraries are very readable by nature and well-written contracts should make it easy to follow the logic Red flags are different for everyone but might include blacklisting operations, enabling/disabling trade functionality, unnecessary obfuscation etc. What are some of the first events/transactions that were triggered with the contract? What does the holder distribution look like? (top 100) Be wary of multi-wallets, liquidity swingers, and shady developers Some platforms will show you volume by address How much value is held in the deployer/developer/marketing wallets? What does the transaction history of the deployer look like? Have they published any token contracts in the past? How recently? How'd that go? Where was the wallet funded from? If applicable, what is the transaction history of said address(es)? *Transaction Analysis Guide Coming Soon Check the social profiles One of the easiest ways to tell if a team intends to maintain further development is to follow their social media. Does the project have a website? Does the roadmap consist of anything other than \"marketing\"? Think about what's realistic and deliverable in any given timeframe Listen to your gut... does the quality or contents of the website match your confidence in the team's ability to deliver? Check the developers tools, what frameworks are they using? How active is their twitter, when was it created? How active is their telegram group or discord server? What quality of discourse is being had? How much attention to detail does the team have when sharing updates? (grammar, attitude, frequency, etc.) Check the chart Don't trust a massive green candle until you've done enough research to validate the activity and justify an entry. What is the scope of your investment? Flip or Hold? Traditional charting patterns may not matter much in micro-caps, but can be useful for larger altcoins Are there any suspiciously timed trades in the order book? Many for the same amount? MEV bots? Are said trades attracting volume? Or are they cannibalizing? How active is their telegram group or discord server? What quality of discourse is being had? How much attention to detail does the team have when sharing updates? (grammar, attitude, etc.) Check the transaction If you've covered all your green flags and are ready to add to a liquidity pool, keep the following tips in mind: Always check the contract address AND your input parameters before submitting a transaction (if hundred-million-dollar companies can blacklist their own router, you can easily miss a zero) Make sure the suggested gas cost and slippage are agreeable, don't get too comfortable hitting 'Confirm' When approving a token for trade, make sure you're really approving that token Check the progress So you've been hodling a while, and it's time to check back in on your investment. Here are some things to think about: Is progress being made by the team? Are they active in group chats? Check pinned messages before asking any questions Check out whatever the team has released Does it look good? Is it usable? Is it being used? Would you use it? Success Cheers, you performed an audit! Build the Bear Market GitHub","title":"Token Analysis"},{"location":"analysis/#token-analysis-guide","text":"Warning Document under construction and subject to change. Not to be considered a comprehensive guide. Depending on the project, your risk-tolerance, and goals... items listed may not be applicable. Further, this is not a guaranteed path to finding safe \"investments\", and this documentation should never be treated as law. Information below is outlined as a list of details an investor may want to consider before entering a liquidity pool.","title":" Token Analysis Guide"},{"location":"analysis/#check-the-contract","text":"There are many metrics you can measure on-chain, and many ways to obscure those metrics. It's important to understand what you're looking for, and to know how to verify what you're looking at. Use trusted analysis tools and telegram bots for high-level details on the current state of the token. Useful for liquidity metrics, Moonarch Token Sniffer SafeAnalyzerBot Check the explorer, has the contract been verified? \u2192 Read it. Are there any suspicious looking operations? Official solidity libraries are very readable by nature and well-written contracts should make it easy to follow the logic Red flags are different for everyone but might include blacklisting operations, enabling/disabling trade functionality, unnecessary obfuscation etc. What are some of the first events/transactions that were triggered with the contract? What does the holder distribution look like? (top 100) Be wary of multi-wallets, liquidity swingers, and shady developers Some platforms will show you volume by address How much value is held in the deployer/developer/marketing wallets? What does the transaction history of the deployer look like? Have they published any token contracts in the past? How recently? How'd that go? Where was the wallet funded from? If applicable, what is the transaction history of said address(es)? *Transaction Analysis Guide Coming Soon","title":" Check the contract"},{"location":"analysis/#check-the-social-profiles","text":"One of the easiest ways to tell if a team intends to maintain further development is to follow their social media. Does the project have a website? Does the roadmap consist of anything other than \"marketing\"? Think about what's realistic and deliverable in any given timeframe Listen to your gut... does the quality or contents of the website match your confidence in the team's ability to deliver? Check the developers tools, what frameworks are they using? How active is their twitter, when was it created? How active is their telegram group or discord server? What quality of discourse is being had? How much attention to detail does the team have when sharing updates? (grammar, attitude, frequency, etc.)","title":" Check the social profiles"},{"location":"analysis/#check-the-chart","text":"Don't trust a massive green candle until you've done enough research to validate the activity and justify an entry. What is the scope of your investment? Flip or Hold? Traditional charting patterns may not matter much in micro-caps, but can be useful for larger altcoins Are there any suspiciously timed trades in the order book? Many for the same amount? MEV bots? Are said trades attracting volume? Or are they cannibalizing? How active is their telegram group or discord server? What quality of discourse is being had? How much attention to detail does the team have when sharing updates? (grammar, attitude, etc.)","title":" Check the chart"},{"location":"analysis/#check-the-transaction","text":"If you've covered all your green flags and are ready to add to a liquidity pool, keep the following tips in mind: Always check the contract address AND your input parameters before submitting a transaction (if hundred-million-dollar companies can blacklist their own router, you can easily miss a zero) Make sure the suggested gas cost and slippage are agreeable, don't get too comfortable hitting 'Confirm' When approving a token for trade, make sure you're really approving that token","title":" Check the transaction"},{"location":"analysis/#check-the-progress","text":"So you've been hodling a while, and it's time to check back in on your investment. Here are some things to think about: Is progress being made by the team? Are they active in group chats? Check pinned messages before asking any questions Check out whatever the team has released Does it look good? Is it usable? Is it being used? Would you use it? Success Cheers, you performed an audit! Build the Bear Market GitHub","title":" Check the progress"},{"location":"deploying/","text":"How to Deploy Contracts Warning Document under construction and subject to change. Not to be considered a comprehensive guide. Deploying smart contracts is easy... ensuring they function as intended is the hard part. Seems like there's a de-peg, bridge exploit, flash loan, or exchange meltdown every week around here. In order to effectively deploy and manage anything , you should have a strong grasp of the EVM's capabilities and limitations. Take some time to read up on anything you may be unfamiliar with; if you're unsure where to start, try the Ethereum Development Documentation . You should also take some time to read up on relevant specification details, or at least see what's cooking with Ethereum Improvement Proposals . Configure your network Once you're comfortable with those foundational concepts, go ahead and get yourself set up on the testnet of your choice; you should be able to add a new network connection in your wallet settings, then find a faucet to fund your wallet (yes, you may need to do a little research) Example Ethereum Mainnet Goerli Testnet RPC: https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161 Chain ID: 1 Symbol: ETH Explorer: https://etherscan.io RPC: https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161 Chain ID: 5 Symbol: ETH Explorer: https://goerli.etherscan.io RPCs for all EVM chains Network connection tool for all EVM chains Configure your IDE For your first couple contracts, you should need nothing more than Remix . Remix allows you to develop, compile, debug, deploy, and interact with contracts; no setup required, no dependencies to install. They offer both web and desktop versions, with plugins to make the process even easier. Other common editors have some widely used Solidity & Ethereum plugins if you want to try and stick with what you're using, but they're likely not maintained by the Ethereum Foundation, which Remix has going for it. However, there are dozens of configurations one might prefer, as this technology naturally breeds extension and customization. Following are links to documentation for several commonly used tools and packages you should take a look at: Truffle - A suite of tools for building, testing, and deploying smart contracts. Offers a development environment for building dApps. Ganache - Allows you to build and test on a local blockchain. Provides a simple interface testing contracts, including the ability to generate test data and track execution. OpenZeppelin - An open-source framework for building secure contracts. Provides a library of reusable code, as well as tools for testing and deploying. HardHat - A framework that covers just about everything listed above; automated testing, debugging, integration with tools like Truffle and Remix, UI for contract interaction, etc. Geth - An Ethereum CLI client written in Go. Allows users to run a full Ethereum node and interact with the blockchain. Each has their own strengths and weaknesses of course, but most of them can get you where you need to go. Take some time to DYOR . Configure your contract details It would be wise to familiarize yourself with any official library / interface implementations you plan to include in your contract(s). For example, if you're planning to use the ERC-20 token interface, get comfortable with the specification's offerings and limitations before-hand. Organization / Readability Think carefully about the structure and organization of your contract, as well as its readability for those reviewing or working with it. Good organization and readability makes it easier to understand and maintain the contract. Smart contracts can be written as a single file or as multiple files that are then compiled into one contract. The choice between these options depends on the complexity of the contract and your preference. There are no strict formatting rules, but the most common practice is to put the state variables at the top, then the constructor, then functions. Adopting a consistent naming convention can make it easier to understand and work with the contract. We'd suggest camelCase or snake_case. Bytecode Verification Much of DeFi's appeal is the public immutability of contracts and transactions between them. You should always verify the bytecode of a smart contract you've published on-chain; for obvious reasons Verification is easy to do directly on the official chain explorer, but some the tools we've mentioned have the ability to verify bytecodes automatically, post-deployment Contract Parameters Many contracts require additional setup, post-deployment; all the tools we've covered in this document either have a command line, or graphical user interface that allow you to interact with / operate smart contracts you've deployed. Etherscan and all variations of it have the very same. Contract Security Many contracts require additional setup, post-deployment; all the tools we've covered in this document either have a command line, or graphical user interface that allow you to interact with / operate smart contracts you've deployed. Etherscan and all variations of it have the very same. As mentioned above, the Ethereum Development Documentation covers much of what we touched on here in more detail if you are unfamiliar with a particular concept. Success Cheers, you're a deployooor! Build the Bear Market GitHub","title":"Deploying"},{"location":"deploying/#how-to-deploy-contracts","text":"Warning Document under construction and subject to change. Not to be considered a comprehensive guide. Deploying smart contracts is easy... ensuring they function as intended is the hard part. Seems like there's a de-peg, bridge exploit, flash loan, or exchange meltdown every week around here. In order to effectively deploy and manage anything , you should have a strong grasp of the EVM's capabilities and limitations. Take some time to read up on anything you may be unfamiliar with; if you're unsure where to start, try the Ethereum Development Documentation . You should also take some time to read up on relevant specification details, or at least see what's cooking with Ethereum Improvement Proposals .","title":" How to Deploy Contracts"},{"location":"deploying/#configure-your-network","text":"Once you're comfortable with those foundational concepts, go ahead and get yourself set up on the testnet of your choice; you should be able to add a new network connection in your wallet settings, then find a faucet to fund your wallet (yes, you may need to do a little research) Example Ethereum Mainnet Goerli Testnet RPC: https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161 Chain ID: 1 Symbol: ETH Explorer: https://etherscan.io RPC: https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161 Chain ID: 5 Symbol: ETH Explorer: https://goerli.etherscan.io RPCs for all EVM chains Network connection tool for all EVM chains","title":" Configure your network"},{"location":"deploying/#configure-your-ide","text":"For your first couple contracts, you should need nothing more than Remix . Remix allows you to develop, compile, debug, deploy, and interact with contracts; no setup required, no dependencies to install. They offer both web and desktop versions, with plugins to make the process even easier. Other common editors have some widely used Solidity & Ethereum plugins if you want to try and stick with what you're using, but they're likely not maintained by the Ethereum Foundation, which Remix has going for it. However, there are dozens of configurations one might prefer, as this technology naturally breeds extension and customization. Following are links to documentation for several commonly used tools and packages you should take a look at: Truffle - A suite of tools for building, testing, and deploying smart contracts. Offers a development environment for building dApps. Ganache - Allows you to build and test on a local blockchain. Provides a simple interface testing contracts, including the ability to generate test data and track execution. OpenZeppelin - An open-source framework for building secure contracts. Provides a library of reusable code, as well as tools for testing and deploying. HardHat - A framework that covers just about everything listed above; automated testing, debugging, integration with tools like Truffle and Remix, UI for contract interaction, etc. Geth - An Ethereum CLI client written in Go. Allows users to run a full Ethereum node and interact with the blockchain. Each has their own strengths and weaknesses of course, but most of them can get you where you need to go. Take some time to DYOR .","title":" Configure your IDE"},{"location":"deploying/#configure-your-contract-details","text":"It would be wise to familiarize yourself with any official library / interface implementations you plan to include in your contract(s). For example, if you're planning to use the ERC-20 token interface, get comfortable with the specification's offerings and limitations before-hand.","title":" Configure your contract details"},{"location":"deploying/#organization-readability","text":"Think carefully about the structure and organization of your contract, as well as its readability for those reviewing or working with it. Good organization and readability makes it easier to understand and maintain the contract. Smart contracts can be written as a single file or as multiple files that are then compiled into one contract. The choice between these options depends on the complexity of the contract and your preference. There are no strict formatting rules, but the most common practice is to put the state variables at the top, then the constructor, then functions. Adopting a consistent naming convention can make it easier to understand and work with the contract. We'd suggest camelCase or snake_case.","title":"Organization / Readability"},{"location":"deploying/#bytecode-verification","text":"Much of DeFi's appeal is the public immutability of contracts and transactions between them. You should always verify the bytecode of a smart contract you've published on-chain; for obvious reasons Verification is easy to do directly on the official chain explorer, but some the tools we've mentioned have the ability to verify bytecodes automatically, post-deployment","title":"Bytecode Verification"},{"location":"deploying/#contract-parameters","text":"Many contracts require additional setup, post-deployment; all the tools we've covered in this document either have a command line, or graphical user interface that allow you to interact with / operate smart contracts you've deployed. Etherscan and all variations of it have the very same.","title":"Contract Parameters"},{"location":"deploying/#contract-security","text":"Many contracts require additional setup, post-deployment; all the tools we've covered in this document either have a command line, or graphical user interface that allow you to interact with / operate smart contracts you've deployed. Etherscan and all variations of it have the very same. As mentioned above, the Ethereum Development Documentation covers much of what we touched on here in more detail if you are unfamiliar with a particular concept. Success Cheers, you're a deployooor! Build the Bear Market GitHub","title":"Contract Security"},{"location":"launch/","text":"Token Launch Guide Warning Document under construction and subject to change. Not to be considered a comprehensive guide. Depending on your project/expectations/goals, items listed may not be applicable. Further, this is not a guaranteed path to launching or running a successful token, and this documentation should never be treated as law. Information below is outlined as a checklist of sorts; actions a builder may want to consider before launching a tokenized project. Create your concept There isn't a right or wrong answer when it comes to your concept. Folks are interested in just about anything you can imagine, and there's plenty of room at the table for everyone to eat. Think about the scope of your project... Trend tokens - Predict the future - Quantumrun Ride the coattails of success (Mini, Baby, v2, Community, etc.) - CoinMarketCap Create the trend with unique tokenomics or a new meta - Concept Generators Make a degenerate, deep-fried meme 'Shib' and 'Floki' are off-limits Utility tokens - Yield; rewards/reflections; staking, access, etc. Ecosystem; governance, tools, p2e, etc. Miscellaneous; charity, non-profit, third-party support, etc. Create your social profiles There should be a gateway (or two) for your community to interact, get in touch with the team, and feel heard as investors. No room for fear, uncertainty, and doubt (FUD) when the team & community members move with confidence, certainty, and conviction (CCC\u2122). E-mail address - Gmail Google Voice phone number (use that \u2934) - Google Voice Telegram account and channel (use that \u2934) - Telegram Start setting up Rose (filters, chat settings, etc.) - Rose Guide Find a couple moderators you trust Twitter - Twitter Discord (if applicable) Create your website There are many factors to consider when building your site; representation, usability, a11y, branding, UI-UX, etc. Take your time. Present the project how you intend for it to be presented. Purchase domain name - Name.com , Google Domains Be sure to protect registrar Optionally get domain/hosting from same provider; many offer WYSIWYG editors GoDaddy SquareSpace Wix Set up hosting (if separate) - AWS Design and Build your website (details, socials, roadmap, tooling, etc.) - SPA Hosting GitHub Pages: Amplify De-Fi Integrations Web3 WalletConnect There are tons of free embedded widgets you can find to spruce up your content, but don't go overboard If you need something more complex than a single-page application, AWS can cover just about anything, for a relatively cheap price Create your roadmap Set realistic goals for your project and make detailed plans to achieve them. The more detail you share, the more confidence you will instill in your investors. Utilities - what do you have to offer? Lottery systems, NFTs with perks Staking pools, Rewards calculator Telegram/Discord/Twitter bots Marketing - Only share top-level strategies (don't show all the cards) Traditional cryptosphere advertising (shilling, calls, ads, etc.) Real-world presence (charity, merch, billboards/flyers, etc.) Milestones & Goals (realistic metrics) White Paper (if applicable) Create your artwork One of the largest factors in successfully marketing a project is branding. Advertisements and artwork need to be eye-catching (at least for the type of eyes you're hoping to catch). Artificial intelligence has given birth to dozens of free storyboarding, brainstorming, graphics, and design tools lately.. you just have to go looking for them. Palette for marketing materials - Coolors Set of emojis that embody your theme - Picker Logo, banners, message thumbnails - DALL\u00b7E 2 Sticker pack(s) and memes - Telegram Sticker Bot Fancy motion graphics - Fiverr Art for potential NFTs - Deforum's Stable Diffusion Create your contract(s) Attention to detail is essential during the contract development phase. Ensure your features have been well-tested, and don't become another exploit statistic. Decide on tokenomics and liquidity amount - Unique features tend to do well Long-term, would be wise to hold a small % of supply in your deployer wallet Fund widget/app pools, listings Giveaways, aidrops, competitions, chat games Decide on anti-abuse measures - Low max hold, even lower max amount transferred per transaction would be wise Optionally blacklist txs within X blocks of launch block, or implement the Pausable Context Let potential searchers surrender their trades Gradually lower sell tax post-launch Include your social links, ASCII masterpieces, and easter eggs in the comments Finish any other contracts that need to be prepared at launch Triple-test everything Ensure commonly used tools show no red flags (post-launch) - SafeAnalyzerBot TokenSniffer Moonarch *Contract Repo Coming Soon Create your marketing material Get ready to present your project. Have informative descriptions/details pre-written for quick posts and rapid sharing. Short, medium, and long format copy-texts, variations with and without links - Be brief and genuine, don't oversell yourself or appear desperate for a pump Scheduled tweets/posts for steady engagement Lore/larp - Anonymous team Link some whale wallets \"For the culture\", \"Based\", \"King\", etc. You get the point Script options for potential AMAs; what you've done, are doing, and will do Create your marketing plan Another critically important phase of a healthy project launch is outlining a detailed marketing plan. You're steering the ship; you should know where it's headed... and when. Find a trustworthy group of flooring enthusiasts First pump-to-floor should be from word-of-mouth ONLY Group attitude should highlight the importance of working for your bags, developers are not here to bail you out - Respectful, honest, clean, clear, and concise communication No tolerance for violence, racism, bigotry, or nudity Remember that your users & community are a large part of your marketing presence. They represent you Various competitions, 0% tax bonanzas, active member giveaways - Gleam , Kickoff Play chat games with the community; bots, polls, media and such, all create entertaining content and can support your project's concept Host or get involved in AMAs/Spaces Costly options - Calls should be spaced to bring the right volume, at the right time, for the right price. We'd advise against calling your project on launch day (if they can't hold 24hrs, they won't) Callers rankings - Top100Token , BSC Grow 'SHILL Team Six' (twitter and telegram sers). There are plenty of services you can purchase for a reasonable price. Take care to make sure you choose correctly; and be wary, a wise man once said, \"when you see 'RAID IN 3 2 1' in the chat... it's over.\" Message-board posts: De-Fi Subreddits , 4chan , etc. Relevant Ad Spaces: Cameo , 4chan , Moonarch Farm coin-voting websites Deliver on roadmap items and spread news of advances Put everything on the calendar Create your launch plan Regardless of scope, nobody wants their token chart to be pumped and dumped from the jump. Pay close attention when constructing your launch formula. Be ready with a handful of releases to space out over launch week - Degenerates need to see new developments every day, or they lose interest/confidence Create mini-marketing plans to share new developments (organized shills, community posts, etc.) Determine whether it will be a public/private presale, or fair launch - Trusted presaling options - Pinksale , Gempad Do a couple dry-runs on the test network, ensure that your contracts are entirely functional Pick a time and date, start the clock - Embeddable Countdown Make sure your flooring enthusiasts are ready Create your token Double check everything you've done up to this point, and everything you plan to do once trading is live. There's no going back (unless you launch a v2 LOL) Fund a fresh wallet address with liquidity and deployment funds from a CEX Deploy contract early and unannounced to deter fakes - Optionally, delay verification to deter snipers Perform anti-abuse actions See Further Reading Lock liquidity pool tokens immediately after adding liquidity - Unicrypt Configure telegram bots - Update Rose's settings for chat, filters for contract, liquidity, tokenomics, swap, etc. Add and configure buy alert or pricing bots Try to be present in your groups chat while people are excited - Poll to see what your community wants Share previews of upcoming releases Host events (AMAs, giveaways, games, etc.) Continue with your marketing plan Work on your roadmap items Success Cheers, to building in the bear market! Further Reading How to Deploy Smart Contracts : Just your need-to-know(s) Build the Bear Market GitHub","title":"Token Launch"},{"location":"launch/#token-launch-guide","text":"Warning Document under construction and subject to change. Not to be considered a comprehensive guide. Depending on your project/expectations/goals, items listed may not be applicable. Further, this is not a guaranteed path to launching or running a successful token, and this documentation should never be treated as law. Information below is outlined as a checklist of sorts; actions a builder may want to consider before launching a tokenized project.","title":" Token Launch Guide"},{"location":"launch/#create-your-concept","text":"There isn't a right or wrong answer when it comes to your concept. Folks are interested in just about anything you can imagine, and there's plenty of room at the table for everyone to eat. Think about the scope of your project... Trend tokens - Predict the future - Quantumrun Ride the coattails of success (Mini, Baby, v2, Community, etc.) - CoinMarketCap Create the trend with unique tokenomics or a new meta - Concept Generators Make a degenerate, deep-fried meme 'Shib' and 'Floki' are off-limits Utility tokens - Yield; rewards/reflections; staking, access, etc. Ecosystem; governance, tools, p2e, etc. Miscellaneous; charity, non-profit, third-party support, etc.","title":" Create your concept"},{"location":"launch/#create-your-social-profiles","text":"There should be a gateway (or two) for your community to interact, get in touch with the team, and feel heard as investors. No room for fear, uncertainty, and doubt (FUD) when the team & community members move with confidence, certainty, and conviction (CCC\u2122). E-mail address - Gmail Google Voice phone number (use that \u2934) - Google Voice Telegram account and channel (use that \u2934) - Telegram Start setting up Rose (filters, chat settings, etc.) - Rose Guide Find a couple moderators you trust Twitter - Twitter Discord (if applicable)","title":" Create your social profiles"},{"location":"launch/#create-your-website","text":"There are many factors to consider when building your site; representation, usability, a11y, branding, UI-UX, etc. Take your time. Present the project how you intend for it to be presented. Purchase domain name - Name.com , Google Domains Be sure to protect registrar Optionally get domain/hosting from same provider; many offer WYSIWYG editors GoDaddy SquareSpace Wix Set up hosting (if separate) - AWS Design and Build your website (details, socials, roadmap, tooling, etc.) - SPA Hosting GitHub Pages: Amplify De-Fi Integrations Web3 WalletConnect There are tons of free embedded widgets you can find to spruce up your content, but don't go overboard If you need something more complex than a single-page application, AWS can cover just about anything, for a relatively cheap price","title":" Create your website"},{"location":"launch/#create-your-roadmap","text":"Set realistic goals for your project and make detailed plans to achieve them. The more detail you share, the more confidence you will instill in your investors. Utilities - what do you have to offer? Lottery systems, NFTs with perks Staking pools, Rewards calculator Telegram/Discord/Twitter bots Marketing - Only share top-level strategies (don't show all the cards) Traditional cryptosphere advertising (shilling, calls, ads, etc.) Real-world presence (charity, merch, billboards/flyers, etc.) Milestones & Goals (realistic metrics) White Paper (if applicable)","title":" Create your roadmap"},{"location":"launch/#create-your-artwork","text":"One of the largest factors in successfully marketing a project is branding. Advertisements and artwork need to be eye-catching (at least for the type of eyes you're hoping to catch). Artificial intelligence has given birth to dozens of free storyboarding, brainstorming, graphics, and design tools lately.. you just have to go looking for them. Palette for marketing materials - Coolors Set of emojis that embody your theme - Picker Logo, banners, message thumbnails - DALL\u00b7E 2 Sticker pack(s) and memes - Telegram Sticker Bot Fancy motion graphics - Fiverr Art for potential NFTs - Deforum's Stable Diffusion","title":" Create your artwork"},{"location":"launch/#create-your-contracts","text":"Attention to detail is essential during the contract development phase. Ensure your features have been well-tested, and don't become another exploit statistic. Decide on tokenomics and liquidity amount - Unique features tend to do well Long-term, would be wise to hold a small % of supply in your deployer wallet Fund widget/app pools, listings Giveaways, aidrops, competitions, chat games Decide on anti-abuse measures - Low max hold, even lower max amount transferred per transaction would be wise Optionally blacklist txs within X blocks of launch block, or implement the Pausable Context Let potential searchers surrender their trades Gradually lower sell tax post-launch Include your social links, ASCII masterpieces, and easter eggs in the comments Finish any other contracts that need to be prepared at launch Triple-test everything Ensure commonly used tools show no red flags (post-launch) - SafeAnalyzerBot TokenSniffer Moonarch *Contract Repo Coming Soon","title":" Create your contract(s)"},{"location":"launch/#create-your-marketing-material","text":"Get ready to present your project. Have informative descriptions/details pre-written for quick posts and rapid sharing. Short, medium, and long format copy-texts, variations with and without links - Be brief and genuine, don't oversell yourself or appear desperate for a pump Scheduled tweets/posts for steady engagement Lore/larp - Anonymous team Link some whale wallets \"For the culture\", \"Based\", \"King\", etc. You get the point Script options for potential AMAs; what you've done, are doing, and will do","title":" Create your marketing material"},{"location":"launch/#create-your-marketing-plan","text":"Another critically important phase of a healthy project launch is outlining a detailed marketing plan. You're steering the ship; you should know where it's headed... and when. Find a trustworthy group of flooring enthusiasts First pump-to-floor should be from word-of-mouth ONLY Group attitude should highlight the importance of working for your bags, developers are not here to bail you out - Respectful, honest, clean, clear, and concise communication No tolerance for violence, racism, bigotry, or nudity Remember that your users & community are a large part of your marketing presence. They represent you Various competitions, 0% tax bonanzas, active member giveaways - Gleam , Kickoff Play chat games with the community; bots, polls, media and such, all create entertaining content and can support your project's concept Host or get involved in AMAs/Spaces Costly options - Calls should be spaced to bring the right volume, at the right time, for the right price. We'd advise against calling your project on launch day (if they can't hold 24hrs, they won't) Callers rankings - Top100Token , BSC Grow 'SHILL Team Six' (twitter and telegram sers). There are plenty of services you can purchase for a reasonable price. Take care to make sure you choose correctly; and be wary, a wise man once said, \"when you see 'RAID IN 3 2 1' in the chat... it's over.\" Message-board posts: De-Fi Subreddits , 4chan , etc. Relevant Ad Spaces: Cameo , 4chan , Moonarch Farm coin-voting websites Deliver on roadmap items and spread news of advances Put everything on the calendar","title":" Create your marketing plan"},{"location":"launch/#create-your-launch-plan","text":"Regardless of scope, nobody wants their token chart to be pumped and dumped from the jump. Pay close attention when constructing your launch formula. Be ready with a handful of releases to space out over launch week - Degenerates need to see new developments every day, or they lose interest/confidence Create mini-marketing plans to share new developments (organized shills, community posts, etc.) Determine whether it will be a public/private presale, or fair launch - Trusted presaling options - Pinksale , Gempad Do a couple dry-runs on the test network, ensure that your contracts are entirely functional Pick a time and date, start the clock - Embeddable Countdown Make sure your flooring enthusiasts are ready","title":" Create your launch plan"},{"location":"launch/#create-your-token","text":"Double check everything you've done up to this point, and everything you plan to do once trading is live. There's no going back (unless you launch a v2 LOL) Fund a fresh wallet address with liquidity and deployment funds from a CEX Deploy contract early and unannounced to deter fakes - Optionally, delay verification to deter snipers Perform anti-abuse actions See Further Reading Lock liquidity pool tokens immediately after adding liquidity - Unicrypt Configure telegram bots - Update Rose's settings for chat, filters for contract, liquidity, tokenomics, swap, etc. Add and configure buy alert or pricing bots Try to be present in your groups chat while people are excited - Poll to see what your community wants Share previews of upcoming releases Host events (AMAs, giveaways, games, etc.) Continue with your marketing plan Work on your roadmap items Success Cheers, to building in the bear market!","title":" Create your token"},{"location":"launch/#further-reading","text":"How to Deploy Smart Contracts : Just your need-to-know(s) Build the Bear Market GitHub","title":" Further Reading"},{"location":"minting/","text":"How to Mint NFTs Warning Document under construction and subject to change. Not to be considered a comprehensive guide. So you're looking to mint some NFTs on an EVM blockchain, eh? We can get you squared away. First thing's first... what are you planning to mint? Choose your concept Following are some questions you may want to ask yourself: What will your token(s) be used for? Vanity? Private access? Yield farming? Trading? Collecting? Historical references? Do you intend to publish a collection? Maybe just a handful of NFTs? One? Complexity and toolsets can vary greatly depending on the scope of your project What media/metadata needs to be included? Audio/Video NFTs, Collectibles/Traits, Custom data/JSON, etc. Once you have those answers (and any applicable assets), it's time to think about minting. Choose your platform There are many ways to mint an NFT; both free and paid tools are available, with all variety of customizations. However, publishing your own contract is almost as simple as using those tools... provided you know what you're doing; let's talk about it. Info Be sure that you have an understanding of the difference between on-chain and on-site NFTs. Depending on the platform, you may or may not be interacting directly with the blockchain on every transaction So you've got a concept... Do you just want to mint something? The most widely used platforms support many of the options you may be considering, and may be the path of least resistance - OpenSea , NiftyKit , more below There are many NFT minting services with various strengths, but try to stay away from less known tools until you've done your due diligence Do you know what type of NFT(s) you want to mint? If you intend to use a third party, be sure they support the type and characteristics you're looking for Traditional - EIP-721 Multi-Token - EIP-115 Royalty - EIP-2981 Do you want to be in control of the minting process? You could roll your own interface, or use a combination of third-party tools/embeds Do you want control of the contract? If you don't want to manage the overhead, or would prefer to avoid technical burden of any sort... a platform may be best suited for your needs. They will (hopefully) always have an interface for you to easily manage your contract or collection If you DO want to deploy your own NFT contract, See Further Reading Info Using a Third Party Rolling Your Own Pre-built interfaces, mostly customizable Contract likely to be audited, easy setup Low barrier to entry, room to learn more Scalability, built-in audience Lower costs, no third-party stakes Entirely customizable, open-ended flexibility Ownership, transparency, interoperability, branding, etc You will learn A LOT more Choose your details So you've got a path forward... Once you've decided on a home for your minting interface, and are hosting the asset data on a distributed filesystem (both of which most common platforms will do for you nowadays), you're ready to fine-tune the details. Are there attributes you need to include? Do you need to set up royalties? Who is able to mint? And when? e.g. Pre-Sale, Whitelist, Pre-Determined Launch Time Most of the following platforms will cover all of that, wrapped up in a nice GUI. There's usually no need for you to re-invent the wheel unless you want full control of the contract for specific reasons. OpenSea: Most popular marketplace with largest selection / community, multi-chain. Rarible: Basically the same deal as OpenSea, but they also have their own token. SuperRare: : More curated marketplace, generally higher quality content. Nifty Gateway: Basically the same deal as SuperRare, just different branding and artists. This a just to name a few, there are probably dozens of options now. If you're using a third party, take your time to find the right fit for your project. It's important to cultivate the experience you're looking to portray; one platform may have a feature set, or even an aesthetic that suits you better. Browse what's available. If you're not using a third party, you'll have to add whatever functionality is needed within your contract. For tips on certain collection management operations, you should check out some verified contracts' source code for popular NFT projects from various platforms on Etherscan. e.g. Build the Bear Early Adopters Contract: Choose your future So you're ready to get moving... Perhaps most importantly, you need to follow through with your concept. Be true to yourself, and your collectors; do not over-promise, and do not under-deliver. This technology is as young as it is useful (very); there are many iterations of trends, and phases of improvement yet to be uncovered. Success Cheers, to being non-fungible! Further Reading How to Deploy Smart Contracts : Just your need-to-know(s) Build the Bear Market GitHub","title":"Minting"},{"location":"minting/#how-to-mint-nfts","text":"Warning Document under construction and subject to change. Not to be considered a comprehensive guide. So you're looking to mint some NFTs on an EVM blockchain, eh? We can get you squared away. First thing's first... what are you planning to mint?","title":" How to Mint NFTs"},{"location":"minting/#choose-your-concept","text":"Following are some questions you may want to ask yourself: What will your token(s) be used for? Vanity? Private access? Yield farming? Trading? Collecting? Historical references? Do you intend to publish a collection? Maybe just a handful of NFTs? One? Complexity and toolsets can vary greatly depending on the scope of your project What media/metadata needs to be included? Audio/Video NFTs, Collectibles/Traits, Custom data/JSON, etc. Once you have those answers (and any applicable assets), it's time to think about minting.","title":" Choose your concept"},{"location":"minting/#choose-your-platform","text":"There are many ways to mint an NFT; both free and paid tools are available, with all variety of customizations. However, publishing your own contract is almost as simple as using those tools... provided you know what you're doing; let's talk about it. Info Be sure that you have an understanding of the difference between on-chain and on-site NFTs. Depending on the platform, you may or may not be interacting directly with the blockchain on every transaction So you've got a concept... Do you just want to mint something? The most widely used platforms support many of the options you may be considering, and may be the path of least resistance - OpenSea , NiftyKit , more below There are many NFT minting services with various strengths, but try to stay away from less known tools until you've done your due diligence Do you know what type of NFT(s) you want to mint? If you intend to use a third party, be sure they support the type and characteristics you're looking for Traditional - EIP-721 Multi-Token - EIP-115 Royalty - EIP-2981 Do you want to be in control of the minting process? You could roll your own interface, or use a combination of third-party tools/embeds Do you want control of the contract? If you don't want to manage the overhead, or would prefer to avoid technical burden of any sort... a platform may be best suited for your needs. They will (hopefully) always have an interface for you to easily manage your contract or collection If you DO want to deploy your own NFT contract, See Further Reading Info Using a Third Party Rolling Your Own Pre-built interfaces, mostly customizable Contract likely to be audited, easy setup Low barrier to entry, room to learn more Scalability, built-in audience Lower costs, no third-party stakes Entirely customizable, open-ended flexibility Ownership, transparency, interoperability, branding, etc You will learn A LOT more","title":" Choose your platform"},{"location":"minting/#choose-your-details","text":"So you've got a path forward... Once you've decided on a home for your minting interface, and are hosting the asset data on a distributed filesystem (both of which most common platforms will do for you nowadays), you're ready to fine-tune the details. Are there attributes you need to include? Do you need to set up royalties? Who is able to mint? And when? e.g. Pre-Sale, Whitelist, Pre-Determined Launch Time Most of the following platforms will cover all of that, wrapped up in a nice GUI. There's usually no need for you to re-invent the wheel unless you want full control of the contract for specific reasons. OpenSea: Most popular marketplace with largest selection / community, multi-chain. Rarible: Basically the same deal as OpenSea, but they also have their own token. SuperRare: : More curated marketplace, generally higher quality content. Nifty Gateway: Basically the same deal as SuperRare, just different branding and artists. This a just to name a few, there are probably dozens of options now. If you're using a third party, take your time to find the right fit for your project. It's important to cultivate the experience you're looking to portray; one platform may have a feature set, or even an aesthetic that suits you better. Browse what's available. If you're not using a third party, you'll have to add whatever functionality is needed within your contract. For tips on certain collection management operations, you should check out some verified contracts' source code for popular NFT projects from various platforms on Etherscan. e.g. Build the Bear Early Adopters Contract:","title":" Choose your details"},{"location":"minting/#choose-your-future","text":"So you're ready to get moving... Perhaps most importantly, you need to follow through with your concept. Be true to yourself, and your collectors; do not over-promise, and do not under-deliver. This technology is as young as it is useful (very); there are many iterations of trends, and phases of improvement yet to be uncovered. Success Cheers, to being non-fungible!","title":" Choose your future"},{"location":"minting/#further-reading","text":"How to Deploy Smart Contracts : Just your need-to-know(s) Build the Bear Market GitHub","title":" Further Reading"}]}